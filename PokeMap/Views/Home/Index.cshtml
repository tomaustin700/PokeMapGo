<link href="~/Content/dx.light.css" rel="stylesheet" />
<link href="~/Content/dx.spa.css" rel="stylesheet" />
<link href="~/Content/dx.common.css" rel="stylesheet" />

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC5cga11DYKnZBM5ViZnQuYx7RVa6dM7Wc&libraries=places" type="text/javascript"></script>

@*<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC5cga11DYKnZBM5ViZnQuYx7RVa6dM7Wc&libraries=places"></script>*@


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="~/Js/MarkerManager.js" type="text/javascript"></script>
<script src="~/Js/MarkerClusterPlus.js" type="text/javascript"></script>
<script src="~/Js/Spin.js" type="text/javascript"></script>


<!--  spinner div -->



<div id="spinner"></div>


<div class="popoverPosition contextmenuStyle" style="width: 1px; padding: 0; margin: 0"></div>

@* This is the cause of the side bar apearing and disappearing, check it out at some point  *@
<div id="info" class="container" style='position: absolute; bottom: 5px; left: 3px; padding-left: 5px; margin: 0; z-index: 999; display: flex; font-size: 0px; line-height: 0;'>
    <div style='left: 10px; flex:1;'>
        <a href="https://twitter.com/pokemapgouk" class="twitter-follow-button" data-show-count="false" data-show-screen-name="false"></a>
        <script style="position: absolute;" async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
    </div>
    <div style='left:10px; flex:1; margin-left:5px;'>
        <form style="left:5px;" action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
            <input type="hidden" name="cmd" value="_s-xclick">
            <input type="hidden" name="hosted_button_id" value="GGDC5Q3CLHFNG">
            <input type="image" src="https://www.paypalobjects.com/en_GB/i/btn/btn_donate_SM.gif" border="0" name="submit" alt="PayPal – The safer, easier way to pay online!">
            <img alt="" border="0" src="https://www.paypalobjects.com/en_GB/i/scr/pixel.gif" width="1" height="1">
        </form>
    </div>
</div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {



    @*<div style="z-index: 10000" data-bind="dxPopup: { visible: showPopup, height: 400, width: 400, closeOnOutsideClick: true }"></div>*@


    <section class="scripts">


        <script type="text/javascript">

            $(document).ready(function () {
                viewModel.GetPokemon()
                Initialize();

                // Sidebar click handler
                $('.menu').on('click', function () {
                    showSideBar("toggle");
                })

                $('#map_canvas').on('click', function (e) {
                    showSideBar("close");
                })
            });

            var map = '';
            var bounds;
            var spinner;
            var markers = [];
            //var existing;
            var markerCluster;
            var searchValue;
            var service;
            var geocoder;
            var APIKEY = "AIzaSyC5cga11DYKnZBM5ViZnQuYx7RVa6dM7Wc";
            var borderCoords = '';
            var isMoving = '';

            function showSideBar(option) {
                if (option == "toggle") {
                    $('#sidebar').toggleClass('show');
                } else if (option == "close") {
                    $('#sidebar').removeClass('show');
                }
            }

            function setMapOnAll(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }

            ClearMarkers = function () {
                setMapOnAll(null);
                markers = [];
            }
            // TODO - Change info windows to be popovers which have better customisation, not sure which library yet though

            var infoWindow = new google.maps.InfoWindow();
            //var selectedPosition = '';
            // TODO - create info window array that contains all info windows that are created and iterate through them and call infoWindow.close()%

            infoWindowCollection = [];


            GetResultDetail = function (result) {
                var heightWidth;
                var url;
                var name;
                switch (result.Type) {
                    case 'Pokémon':
                        heightWidth = null;
                        if (result.PokeMon) {
                            url = '/Images/PokemonPins/' + result.PokeMon + '.png'
                        } else {
                            url = '/Images/lureball.png'
                        }
                        name = result.PokeMon
                        break;
                    case 'Pokégym':
                        url = '/Images/pokegym.png'
                        heightWidth = { Height: 57, Width: 40 };
                        name = result.Type

                        break;
                    case 'Lure':
                        url = '/Images/lureball.png'
                        heightWidth = { Height: 30, Width: 30 };
                        name = result.Type

                        break;

                    case 'Pokéstop':
                        url = '/Images/pokestop.png'
                        heightWidth = { Height: 57, Width: 40 };
                        name = result.Type

                        break;
                }

                return { url: url, heightWidth: heightWidth, name: name };
            }





            // Ajax call to get the pins for the map
            function GetSightings(bounds) {
                spinner.spin();

                var zoomLevel = map.getZoom();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify({
                        Bounds:
                            {
                                bottomLeftLat: zoomLevel <= 3 ? -180 : bounds.getSouthWest().lat(),
                                bottomLeftLong: zoomLevel <= 3 ? -180 : bounds.getSouthWest().lng(),
                                topRightLat: zoomLevel <= 3 ? 180 : bounds.getNorthEast().lat(),
                                topRightLong: zoomLevel <= 3 ? 180 : bounds.getNorthEast().lng(),
                            },
                        Pokemon: searchValue,
                        //ExistingSightings: existing
                    }),
                    url: '/Sightings/PostSightings',
                    success: function (result) {

                        existing = result;
                        //markers = [];
                        ClearMarkers();
                        viewModel.markerPopover.visible(false)

                        if (markerCluster) {
                            markerCluster.clearMarkers();
                        }
                        if (borderCoords) {
                            borderCoords.setMap(null);
                        }



                        var options = {
                            imagePath: '/Images/m'
                        };

                        for (var i = 0; i < result.length; i++) {
                            var infoWindow = new google.maps.InfoWindow();
                            var detail = GetResultDetail(result[i])

                            result[i].iconSrc = detail.url;


                            if (result[i].Type === 'Pokémon') {
                                var image = {
                                    url: detail.url
                                }
                            } else {
                                var image = {
                                    scaledSize: new google.maps.Size(detail.heightWidth.Width, detail.heightWidth.Height), // scaled size
                                    url: detail.url
                                }
                            }
                            if (map.getZoom() < 20) {
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(result[i].Latitude, result[i].Longitude),
                                    icon: image,
                                    DeletePin: viewModel.DeletePin,
                                    Sighting: result[i],
                                    title: result[i].Type === 'Pokémon' ? 'A wild ' + detail.name + ' appeared' : result[i].Type == 'Pokéstop' ? 'Just another Pokéstop' : 'Just another Pokégym'
                                });

                            } else {
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(result[i].Latitude, result[i].Longitude),
                                    icon: image,
                                    map: map,
                                    DeletePin: viewModel.DeletePin,
                                    Sighting: result[i],
                                    title: result[i].Type === 'Pokémon' ? 'A wild ' + detail.name + ' appeared' : result[i].Type == 'Pokéstop' ? 'Just another Pokéstop' : 'Just another Pokégym'
                                });

                            }

                            markers.push(marker);

                            google.maps.event.addListener(marker, "click", function (e) {
                                $('#searchPokemon').find('input').blur();

                                if (viewModel.manualAddPopover.visible()) {
                                    viewModel.EnableMapLeftClick()
                                }

                                viewModel.selectedMarker(this);
                                viewModel.selectedSighting(new SightingMapping(this.Sighting))
                                viewModel.CheckVote();
                                viewModel.GetUserRating();

                                setMenuXY(this.getPosition(), $('.popoverPosition'));
                                $('.popoverPosition').css('top', $('.popoverPosition').position().top + 20 + 'px')

                                viewModel.markerPopover.target($('.popoverPosition'))
                                viewModel.markerPopover.visible(true)

                                CloseOpenInfoWindows()
                                $('.contextmenu').remove();
                                infoWindowCollection.push(infoWindow)
                            });
                        }





                        viewModel.pokemonCollection(result)

                        // TODO - add directions from your current location to the nearest sighting of your search results
                        if (map.getZoom() < 20) {
                            markerCluster = new MarkerClusterer(map, markers, options);
                        }
                        spinner.stop();



                        //google.maps.event.addListener(markerCluster, "mouseover", function (c) {

                        //    viewModel.clusterPopover.visible(false)
                        //    viewModel.markerPopover.visible(false)

                        //    if (borderCoords) {
                        //        borderCoords.setMap(null);
                        //    }

                        //    var unique = CheckUnique(c.markers_);

                        //    viewModel.distinctPokemon(unique.MarkerContents)

                        //    setMenuXY(c.markers_[0].position, $('.popoverPosition'));

                        //    $('.popoverPosition').css('top', $('.popoverPosition').position().top + 60 + 'px')

                        //    viewModel.clusterPopover.target($('.popoverPosition'))
                        //    viewModel.clusterPopover.visible(true)


                        //});


                        //google.maps.event.addListener(markerCluster, "mouseout", function (c) {

                        //    if (borderCoords) {
                        //        borderCoords.setMap(null);
                        //    }

                        //})

                        if (searchValue && result.length == 0) {
                            codeAddress(searchValue);
                        }
                    },

                    error: function (x, status, error) {
                        viewModel.ShowNotifications(x.statusText)
                    }
                });


            };

            function CheckUnique(xs) {
                var seen = {};
                var arr = [];
                var polyCoords = [];



                //var result = GetPolyCoords(xs)

                //polyCoords.push(result)

                for (var i = 0; i < xs.length; i++) {

                    if (seen[xs[i].Sighting.PokeMon]) {
                        seen[xs[i].Sighting.PokeMon] = { Seen: true, Amount: seen[xs[i].Sighting.PokeMon].Amount + 1, Name: xs[i].Sighting.PokeMon }
                        continue
                    }

                    if (seen[xs[i].Sighting.Type]) {
                        seen[xs[i].Sighting.Type] = { Seen: true, Amount: seen[xs[i].Sighting.Type].Amount + 1, Name: xs[i].Sighting.Type }
                        continue
                    }

                    if (!xs[i].Sighting.PokeMon) {
                        seen[xs[i].Sighting.Type] = { Seen: true, Amount: 1, Name: xs[i].Sighting.Type }
                        continue;
                    }

                    seen[xs[i].Sighting.PokeMon] = { Seen: true, Amount: 1, Name: xs[i].Sighting.PokeMon }
                    continue
                }

                for (var i = 0 in seen) {
                    arr.push(seen[i])
                }



                //// Construct the polygon.

                //borderCoords = new google.maps.Polygon({
                //    paths: polyCoords,
                //    strokeColor: '#FF0000',
                //    strokeOpacity: 0.8,
                //    strokeWeight: 2,
                //    fillColor: '#FF0000',
                //    fillOpacity: 0.35
                //});

                //borderCoords.setMap(map);

                return { MarkerContents: arr, PolyCoords: polyCoords };
            }

            function GetPolyCoords(markers) {
                var ns = markers.slice(0);
                var ew = markers.slice(0);
                var arr = [];

                ew.sort(function (a, b) {
                    if (a.position.lat() < b.position.lat()) {
                        return -1;
                    }
                    else if (a.position.lat() > b.position.lat()) {
                        return 1;
                    }

                    return 0;
                });

                ns.sort(function (a, b) {
                    if (a.position.lng() < b.position.lng()) {
                        return -1;
                    }
                    else if (a.position.lng() > b.position.lng()) {
                        return 1;
                    }

                    return 0;
                });

                var nw;
                var ne;
                var se;
                var sw;

                if (ew.indexOf(ns[0]) > 1) {
                    nw = ns[0];
                }
                else {
                    ne = ns[0];
                }

                if (ew.indexOf(ns[1]) > 1) {
                    nw = ns[1];
                }
                else {
                    ne = ns[1];
                }

                if (ew.indexOf(ns[2]) > 1) {
                    sw = ns[2];
                }
                else {
                    se = ns[2];
                }

                if (ew.indexOf(ns[3]) > 1) {
                    sw = ns[3];
                }
                else {
                    se = ns[3];
                }

                nw ? arr.push(nw.position) : ''
                ne ? arr.push(ne.position) : ''
                se ? arr.push(se.position) : ''
                sw ? arr.push(sw.position) : ''

                return arr;
            }

            function codeAddress(searchTerm) {

                geocoder.geocode({ 'address': searchTerm, 'region': 'uk' }, function (results, status) {

                    switch (status) {
                        case google.maps.GeocoderStatus.OK:
                            map.setCenter(results[0].geometry.location);
                            searchValue = '';
                            bounds = map.getBounds();
                            GetSightings(bounds);
                            break;

                        case google.maps.GeocoderStatus.ERROR:
                            viewModel.ShowNotifications("An unexpected error occurred")
                            break

                        case google.maps.GeocoderStatus.INVALID_REQUEST:
                            viewModel.ShowNotifications("This request is not valid")
                            break

                        case google.maps.GeocoderStatus.OVER_QUERY_LIMIT:
                            viewModel.ShowNotifications("This api key has had too many requests")
                            break

                        case google.maps.GeocoderStatus.RQUEST_DENIED:
                            viewModel.ShowNotifications("You do not have permission to perform this request")
                            break

                        case google.maps.GeocoderStatus.UNKNOWN_ERROR:
                            viewModel.ShowNotifications("An unexpected error occurred")
                            break

                        case google.maps.GeocoderStatus.ZERO_RESULTS:
                            viewModel.ShowNotifications("This search returned no results, please check the spelling")
                            break

                        default:
                    }

                });
            }

            // The initialising of the map
            function Initialize(viewModel) {
                geocoder = new google.maps.Geocoder();


                var opts = {
                    lines: 13 // The number of lines to draw
                               , length: 28 // The length of each line
                               , width: 14 // The line thickness
                               , radius: 42 // The radius of the inner circle
                               , scale: 0.25 // Scales overall size of the spinner
                               , corners: 1 // Corner roundness (0..1)
                               , color: '#000' // #rgb or #rrggbb or array of colors
                               , opacity: 0.55 // Opacity of the lines
                               , rotate: 0 // The rotation offset
                               , direction: 1 // 1: clockwise, -1: counterclockwise
                               , speed: 1 // Rounds per second
                               , trail: 60 // Afterglow percentage
                               , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
                               , zIndex: 2e9 // The z-index (defaults to 2000000000)
                               , className: 'spinner' // The CSS class to assign to the spinner
                               , top: '50%' // Top position relative to parent
                               , left: '50%' // Left position relative to parent
                               , shadow: false // Whether to render a shadow
                               , hwaccel: false // Whether to use hardware acceleration
                               , position: 'absolute' // Element positioning
                }
                var target = document.getElementById('spinner')
                spinner = new Spinner(opts).spin(target);

                var mapProp = {
                    center: new google.maps.LatLng(51.508742, -0.120850),
                    zoom: 7,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    disableDefaultUI: true,
                    minZoom: 3
                };

                map = new google.maps.Map(document.getElementById("map_canvas"), mapProp);

                service = new google.maps.places.PlacesService(map);


                var styles = [
                              {
                                  stylers: [
                                    { hue: "#b3f0ff" },
                                    { saturation: -20 }
                                  ]
                              }, {
                                  featureType: "road",
                                  elementType: "geometry",
                                  stylers: [
                                    { lightness: 100 },
                                    { visibility: "simplified" }
                                  ]
                              }, {
                                  featureType: "road",
                                  elementType: "labels",
                                  stylers: [
                                    { visibility: "on" }
                                  ]
                              },
                              {
                                  "featureType": "poi",
                                  "stylers": [
                                    { "hue": "#80ff00" },
                                    { "gamma": 1.31 }
                                  ]
                              }
                ];


                map.setOptions({ styles: styles, clickableIcons: false });


                google.maps.event.addListenerOnce(map, 'idle', function () {
                    debugger;
                    tryGeolocation();
                });

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;

                // Method to get the pins
            }

            function CreateSighting(coords, type) {

                var postData;
                if (type === 0) {

                    var errors = ko.validation.group([viewModel.selectedSighting().Pokemon, viewModel.selectedSighting().Rarity, viewModel.selectedSighting().Time]);

                    viewModel.selectedSighting().Pokemon(viewModel.selectedSighting().Pokemon() === undefined ? '' : viewModel.selectedSighting().Pokemon())
                    viewModel.selectedSighting().Rarity(viewModel.selectedSighting().Rarity() === undefined ? '' : viewModel.selectedSighting().Rarity())
                    viewModel.selectedSighting().Time(viewModel.selectedSighting().Time() === undefined ? '' : viewModel.selectedSighting().Time())


                    viewModel.selectedSighting().Pokemon.notifySubscribers(viewModel.selectedSighting().Pokemon());
                    viewModel.selectedSighting().Rarity.notifySubscribers(viewModel.selectedSighting().Rarity());
                    viewModel.selectedSighting().Type.notifySubscribers(viewModel.selectedSighting().Time());

                    if (errors().length !== 0) {
                        return;
                    }

                    postData = {
                        Rarity: viewModel.selectedSighting().Rarity(),
                        Pokemon: viewModel.selectedSighting().Pokemon(),
                        TimeOfDay: viewModel.selectedSighting().Time().reduce(function (a, b) {
                            return a + b.Id;
                        }, 0),
                        Longitude: coords.lng(),
                        Latitude: coords.lat(),
                        Type: type,
                        bottomLeftLat: bounds.getSouthWest().lat(),
                        bottomLeftLong: bounds.getSouthWest().lng(),
                        topRightLat: bounds.getNorthEast().lat(),
                        topRightLong: bounds.getNorthEast().lng(),
                        Notes: viewModel.nearbyLocation()

                    }
                } else {
                    postData = {
                        Longitude: coords.lng(),
                        Latitude: coords.lat(),
                        Type: type
                    }
                }


                $.ajax({
                    type: 'POST',
                    url: '/Sightings/CreateSighting',
                    contentType: 'application/json',
                    data: JSON.stringify(postData),
                    success: function (result) {
                        viewModel.popover.visible(false)
                        viewModel.showSightingPopup(false);
                        var detail = GetResultDetail(result)

                        if (markerCluster) {
                            markerCluster.clearMarkers();
                        }

                        if (viewModel.manualAddPopover.visible()) {
                            viewModel.EnableMapLeftClick()
                        }

                        if (result.Type === 'Pokémon') {
                            var image = {
                                url: detail.url
                            }
                        } else {
                            var image = {
                                scaledSize: new google.maps.Size(detail.heightWidth.Width, detail.heightWidth.Height), // scaled size
                                url: detail.url
                            }
                        }

                        result.iconSrc = detail.url;
                        viewModel.pokemonCollection.push(result)

                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(result.Latitude, result.Longitude),
                            Sighting: result,
                            icon: image,
                            title: result.Type === 'Pokémon' ? 'A wild ' + detail.name + ' appeared' : result.Type == 'Pokéstop' ? 'Just another Pokéstop' : 'Just another Pokégym'
                        });

                        var options = {
                            imagePath: '/Images/m',
                            gridSize: 100
                        };

                        markers.push(marker);

                        if (map.getZoom() < 20) {
                            markerCluster = new MarkerClusterer(map, markers, options);
                        } else {
                            marker.setMap(map);
                        }


                        google.maps.event.addListener(marker, "click", function (e) {
                            $('#searchPokemon').find('input').blur();

                            if (viewModel.AddMarkerPoint()) {
                                viewModel.EnableMapLeftClick()
                            }

                            viewModel.selectedMarker(this);
                            viewModel.selectedSighting(new SightingMapping(this.Sighting))
                            viewModel.CheckVote();
                            viewModel.GetUserRating();

                            CloseOpenInfoWindows()
                            $('.contextmenu').remove();
                            setMenuXY(this.getPosition(), $('.popoverPosition'));
                            $('.popoverPosition').css('top', $('.popoverPosition').position().top + 20 + 'px')

                            viewModel.markerPopover.target($('.popoverPosition'))
                            viewModel.markerPopover.visible(true)
                        });

                        CloseOpenInfoWindows()
                        infoWindowCollection.push(infoWindow)

                        viewModel.votingDirection(0)

                        viewModel.selectedMarker(marker)
                        viewModel.selectedSighting(new SightingMapping(marker.Sighting))


                        //setMenuXY(marker.getPosition(), $('.popoverPosition'));
                        //viewModel.markerPopover.target($('.popoverPosition'))
                        //viewModel.markerPopover.visible(true)

                    },
                    error: function (x, status, error) {
                        viewModel.ShowNotifications(x.statusText)
                    }
                });
            }

            function CloseOpenInfoWindows() {
                for (var i = 0; i < infoWindowCollection.length; i++) {
                    infoWindowCollection[i].close()
                }
                // clears array after hiding all pins
                infoWindowCollection = []
            }; 1

            // get position
            var tryGeolocation = function () {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(positionFound, tryApiLocation)
                    
                }
                else {
                    tryApiLocation();

                };
            }

            var positionFound = function(position)
            {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                geolocationSuccess({ coords: { latitude: pos.lat, longitude: pos.lng } });
            }

            var tryApiLocation = function () {
                $.post("https://www.googleapis.com/geolocation/v1/geolocate?key=" + APIKEY)
                   .done(function (success) {
                       geolocationSuccess({ coords: { latitude: success.location.lat, longitude: success.location.lng } });
                   })
                   .fail(function (x, status, error) {
                       viewModel.ShowNotifications(x.statusText)
                   })
            }

            // Method that is called on a successful geolocation acquisition
            var geolocationSuccess = function (position) {
                var LatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

                map.setCenter(LatLng);
                map.setZoom(13);

                bounds = map.getBounds();
                GetSightings(bounds)
                google.maps.event.addListener(map, 'idle', function (e) {
                    debugger;
                    viewModel.clusterPopover.visible(false);
                    $('.contextmenu').remove();

                    bounds = map.getBounds();
                    GetSightings(bounds);

                });

                //google.maps.event.addListener(map, "zoom_changed", function (e) {
                //    start = new Date().getTime();

                //    if (!isMoving) {
                //        viewModel.clusterPopover.visible(false);
                //        $('.contextmenu').remove();

                //        bounds = map.getBounds();
                //        GetSightings(bounds);
                //    }



                //    google.maps.event.addListener(map, 'mousedown', function (e) {

                //    });

                //    google.maps.event.addListener(map, 'mouseup', function (e) {
                //        end = new Date().getTime();
                //        longpress = (end - start < 400) ? false : true;

                //    });

                //    setTimeout(function (data) {
                //        if (new Date().getTime() - start < 500) {

                //        }
                //    },500)

                //});


                //google.maps.event.addListener(map, "bounds_changed", function (e) {
                //    isMoving = true;
                //})



                //google.maps.event.addListener(map, "dragstart", function (e) {
                //})

                //google.maps.event.addListener(map, "dragend", function (e) {
                //    isMoving = false;
                //    $('.contextmenu').remove();

                //    bounds = map.getBounds();
                //    GetSightings(bounds);
                //});



                var longpress = false;


                // Checks if they are logged in, if they are allow adding pins
                $.ajax({
                    type: 'GET',
                    url: '/Account/IsLoggedIn',
                    success: function (result) {
                        //if (result == "True") {
                        // Code to add pin on right click

                        viewModel.userDetails(result)

                        if (DevExpress.devices.current().deviceType === "desktop") {

                            google.maps.event.addListener(map, "click", function (e) {
                                $('#searchPokemon').find('input').blur();

                                $('.contextmenu').remove();
                                CloseOpenInfoWindows()
                            });


                            google.maps.event.addListener(map, "rightclick", function (e) {
                                $('#searchPokemon').find('input').blur();

                                if (viewModel.manualAddPopover.visible())
                                    viewModel.EnableMapLeftClick()

                                if (result !== false) {
                                    viewModel.selectedPosition(e.latLng)
                                    //viewModel.GetNearby()
                                    viewModel.selectedSighting(new SightingMapping);
                                    viewModel.popover.visible(false)
                                    CloseOpenInfoWindows()
                                    viewModel.markerPopover.visible(false)
                                    showContextMenu(e.latLng);
                                }
                                else {
                                    viewModel.clearCredentialsValidation()
                                    viewModel.isLogin(true)
                                    viewModel.showPopup(true);
                                }
                            });

                        } else {
                            google.maps.event.addListener(map, 'click', function (e) {
                                $('#searchPokemon').find('input').blur();

                                $('.contextmenu').remove();
                                CloseOpenInfoWindows()
                                if (result !== false) {
                                    if (longpress) {
                                        if (viewModel.manualAddPopover.visible())
                                            viewModel.EnableMapLeftClick()
                                        viewModel.markerPopover.visible(false)
                                        viewModel.selectedPosition(e.latLng)
                                        viewModel.selectedSighting(new SightingMapping);
                                        viewModel.showSightingPopup(true);
                                    }
                                }
                                else {
                                    if (longpress) {
                                        if (viewModel.manualAddPopover.visible())
                                            viewModel.EnableMapLeftClick()
                                        viewModel.clearCredentialsValidation()
                                        viewModel.isLogin(true);
                                        viewModel.showPopup(true);
                                    }
                                }
                            });

                            google.maps.event.addListener(map, 'mousedown', function (e) {
                                start = new Date().getTime();
                            });

                            google.maps.event.addListener(map, 'mouseup', function (e) {
                                end = new Date().getTime();
                                longpress = (end - start < 400) ? false : true;

                            });

                        }

                        //}

                    },
                    error: function (x, status, error) {
                        viewModel.ShowNotifications(x.statusText)
                    }
                });


            };



            function GetEnumName(type) {
                switch (type) {
                    case 0:
                        return "Pokémon"

                    case 1:
                        return "Pokégym"
                        break;

                    case 2:
                        return "Lure"
                        break;

                    case 3:
                        return "Pokéstop"
                        break;
                }
            };

            // Context menu methods
            function showContextMenu(currentLatLng) {
                var projection;
                var contextmenuDir;
                projection = map.getProjection();



                $('.contextmenu').remove();
                //$('.popoverPosition').remove();
                contextmenuDir = document.createElement("div");
                contextmenuDir.className = 'contextmenu';

                contextmenuDir.className += ' contextmenuStyle';


                contextmenuDir.innerHTML = '<div class="ContextMenuButton"><div id="pokestopButton" class="context">Add Pokéstop<\/div><\/div>'
                                        + '<div class="ContextMenuButton "><div id="pokegymButton" class="context">Add Pokégym<\/div><\/div>'
                                        + '<div class="ContextMenuButton" ><div id="sightingButton" class="context">Add Sighting<\/div><\/div>'

                $(map.getDiv()).append(contextmenuDir);



                //$(map.getDiv()).append(popoverPosition);

                $('#pokestopButton').on('click', function () {
                    $('.contextmenu').remove();
                    CreateSighting(viewModel.selectedPosition(), 3)
                })

                $('#pokegymButton').on('click', function () {
                    $('.contextmenu').remove();
                    CreateSighting(viewModel.selectedPosition(), 1)
                })

                $('#sightingButton').on('click', function (e) {
                    viewModel.popover.target($('.popoverPosition'))
                    viewModel.popover.visible(true)
                    $('.contextmenu').remove();
                })

                // TODO - a good idea would be to have a team selector when they go on their account, or at some point, so we can get a global stat of amount of people in which team
                // teams - Instinct / Yellow - Mystic / Blue - Valor / Red


                setMenuXY(currentLatLng, $('.contextmenu'));
                setMenuXY(currentLatLng, $('.popoverPosition'));

                contextmenuDir.style.visibility = "visible";
            }


            function getCanvasXY(currentLatLng) {
                var scale = Math.pow(2, map.getZoom());
                var nw = new google.maps.LatLng(
                    map.getBounds().getNorthEast().lat(),
                    map.getBounds().getSouthWest().lng()
                );
                var worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);
                var worldCoordinate = map.getProjection().fromLatLngToPoint(currentLatLng);
                var currentLatLngOffset = new google.maps.Point(
                    Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale),
                    Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale)
                );
                return currentLatLngOffset;
            }

            function setMenuXY(currentLatLng, jQueryElement) {
                var mapWidth = $('#map_canvas').width();
                var mapHeight = $('#map_canvas').height();
                var menuWidth = $('.contextmenu').width();
                var menuHeight = $('.contextmenu').height();

                var clickedPosition = getCanvasXY(currentLatLng);
                var x = clickedPosition.x;
                var y = clickedPosition.y;

                if ((mapWidth - x) < menuWidth)//if to close to the map border, decrease x position
                    x = x - menuWidth;
                if ((mapHeight - y) < menuHeight)//if to close to the map border, decrease y position
                    y = y - menuHeight;

                jQueryElement.css('left', x);
                jQueryElement.css('top', y);
            };



        </script>
    </section>
}
